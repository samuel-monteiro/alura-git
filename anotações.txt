verificar versão do git
git -v
git --version

no git bash é possível utilizar os comandos do linux no terminal 

inserindo suas identificações 
git config --local user.name "Seu nome aqui"
git config --local user.email "seu@email.aqui"

para visualizar identificações
git config user.name 
git config user.email 

inicializar um respositório no GIT
git init 

verificar status
git status

adicionar arquivo para commit
git add

para add um arquivo para monitorar 
git add + nome do arquivo com extenção 

para add todos arquivos da pasta atual para monitorar 
git add .

para remover os arquivos que estão sendo monitorados 
git rm + nome do arquivo

um commit é a forma de dizer que as alterações foram salvas 

para realizar o commit e inserir uma mensagem 
git commit -m "Criando arquivo index.html com lista de cursos e um bloco de anotações"

para visualizar todas informações, como:
Rash - identificação única do commit
Branch - identificação em qual branch se encontra 

git log

para definir configurações locais
git config --local

para definir configurações globais
git config --global

verificar o log resumido em uma linha (menos informações)
git log --oneline

verificar o log detalhado e visualizar as alterações do commit (mais informações)
git log -p

buscar por autor do commit
git log --author="nome do autor"

buscar commit por uma determinada mensagem:
git log --grep="merge pull request"

para mais comandos 
https://devhints.io/git-log

para ignorar o monitoramento do git, inserir o nome do arquivo no gitignore
para ignorar uma pasta, inserir o nome da pasta e uma barra no final exemplo: ide-config/

o gitignore também precisa ser adicionado para monitoramento e commit
então primeiro adicionamos - git add .gitignore
depois realizamos o commit - git commit -m "Adicionando .gitignore"


se o arquivo não estiver funcional, não devemos realizar commit

commit é a forma de salvar um estado ou versão do código


para criar um repositório de controle de versões
git init ---bare

lista todos os repositórios remotos que o respositório local conhece
git remote 

adicionando um repositório remoto
git remote add + nome do respositório + o diretório do repositório (que pode ser uma pasta do computador, pode ser uma url, um endereço na rede)

verificar o endereço do repositório 
git remote -v

para clonar o repositório e dar o nome da pasta já na clonagem 
git clone C:/alura/servidor/ projeto

enviando projeto, quando usamos o -U é que ele sempre envia pro mesmo local de frequência (origin) 
enviando os dados para um repositório
git push (nome do local pra onde quero enviar = local) (nome de onde o projeto está atualmente = master)

renomeando um repositório 
git remote rename + nome atual + nome para redefinir

pegar os dados de um repositório
git pull local master

adicionando o projeto ao github
git remote add origin(nome padrão, mas pode ser mudado) https://github.com/samuel-monteiro/alura-git.git

git push -u origin(repositório) master(branch que estou enviando)

enviando projeto 
git push origin(repositório) master(branch que estou enviando)